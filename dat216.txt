## IAM Database Authentication for MySQL

I want to connect to an Amazon Relational Database Service (Amazon RDS) DB instance using AWS Identity and Access Management (IAM) credentials instead of native authentication methods. How can I do that?
Short Description
Amazon RDS users can connect to an RDS DB instance or cluster with IAM user or role credentials and an authentication token. IAM database authentication is more secure than native authentication methods in the following ways:
* IAM database authentication tokens are generated using your AWS access keys. You don't need to store database user credentials.
* Authentication tokens have a lifespan of 15 minutes, so you don't need to enforce password resets.
* IAM database authentication requires an SSL connection, so all data transmitted to and from your RDS DB instance is encrypted.
* If your application is running on Amazon Elastic Compute Cloud (Amazon EC2), you can use EC2 instance profile credentials to access the database. You don't need to store database passwords on your instance.

## Overview: 
To set up IAM database authentication using IAM roles, follow these steps:
1. Enable IAM DB authentication on the RDS DB instance.
2. Connect to an EC2 instance and install the MySQL server package.
3. Create a database user account that uses an AWS authentication token.
4. Create an IAM role allowing Amazon RDS access.
5. Add an IAM policy that maps the database user to the IAM role.
6. Attach the IAM role to the EC2 instance.
7. Generate an AWS authentication token to identify the IAM role.
8. Download the SSL root certificate file or certificate bundle file.
9. Connect to the RDS DB instance using IAM role credentials and the authentication token.

Note:ÊIAM database authentication is available only for certain database engines and instance types. For the list of supported engines and instances, seeÊAvailability for IAM Database Authentication.

## Prerequisites  
Before you begin this procedure, be sure you have launched the following:
* An RDS DB instance thatÊsupports IAM database authentication.
* An EC2 instance to connect to the database.

## Enable IAM DB authentication on the RDS DB instance
To enable IAM database authentication, you can use the AWS Management Console, AWS Command Line Interface (AWS CLI), or the 

## Amazon RDS API.
For instructions, seeÊEnabling and Disabling IAM Database Authentication.
Note:ÊOn theÊModify DB InstanceÊpage, underÊMaintenance, you can selectÊApply ImmediatelyÊto enable IAM database authentication immediately. Depending on other pending modifications, choosingÊApply ImmediatelyÊmight cause downtime.
Connect to an EC2 instance and install the MySQL server package
Connect to your EC2 instance. If your instance is using an Ubuntu or Amazon Linux Amazon Machine Image (AMI), follow these steps to install the MySQL server package:

## Ubuntu AMI
1.ÊÊÊ Run this command to install the MySQL package:
$ sudo apt-get install mysql-server
2.ÊÊÊ Run this command to set up a root password and to remove the insecure features from your installation:
$ sudo mysql_secure_installation
3.ÊÊÊ Run this command to start MySQL server at every boot:
$ sudo chkconfig mysqld on
4.ÊÊÊ Run this command to start the MySQL server:
$ sudo service mysqld start

## Amazon Linux AMI
1.ÊÊÊ Run this command to install the MySQL package:
$ sudo yum install mysql-server -y
2.ÊÊÊ Run this command to set up a root password and to remove the insecure features from your installation:
$ sudo mysql_secure_installation
3.ÊÊÊ Run this command to start MySQL server at every boot:
$ sudo chkconfig mysqld on
4.ÊÊÊ Run this command to start the MySQL server:
$ sudo service mysqld start

## Create a database user account that uses an AWS authentication token
1.ÊÊÊ From your EC2 instance, connect to the RDS DB instance by running this command. Be sure to enter the master password to log in.
$ mysql -h {Instance endpoint} -u -u$DBUSER -p"$DBPASS"
2.ÊÊÊ Run this command to create a database user account that will use an AWS authentication token instead of a password:
CREATE USER {dbusername} IDENTIFIED WITH AWSAuthenticationPlugin as 'RDS'; Ê
3.ÊÊÊ Optionally, run this command to require the user to connect to the database using SSL:
GRANT USAGE ON *.* TO '{dbusername}'@'%'REQUIRE SSL; Ê
4.ÊÊRun, the below command to verify the user plugin and authentication: 
SELECT host, user, plugin, authentication_string FROM mysql.user; Ê
5.  Run the ÒexitÓ command to close MySQL. Then, log off from the instance.

## Create an IAM role allowing Amazon RDS access
1. Open theÊIAM console.ÊThen, chooseÊRolesÊfrom the navigation pane.Ê
2. ChooseÊCreate role.
3. ChooseÊAWS service, and then chooseÊEC2.
4. ForÊSelect your use case, chooseÊEC2, and then chooseÊNext: Permissions.
5. In the search bar, type ÒRDSÓ. Then, selectÊAmazonRDSFullAccessÊor a custom RDS IAM policy that grants fewer privileges.Ê
6. ChooseÊNext: Review.
7. ForÊRole Name, type a name for this IAM role.
8. ChooseÊCreate Role.

## Add an IAM policy that maps the database user to the IAM role
1. From the IAM role list, open your newly created IAM role.
2. ChooseÊAdd inline policy.
3. Enter the policy fromÊCreating and Using an IAM Policy for IAM Database Access.Ê
Note:ÊBe sure to edit the "Resource" value with the details of your database resources, such as your DB instance identifier and database user name.
4. ChooseÊReview policy.
5. ForÊName, type a policy name.
6. ChooseÊCreate policy.

## Attach the IAM role to the EC2 instance
1. Open theÊAmazon EC2 console.
2. Choose the EC2 instance you will use to connect to Amazon RDS.
3. Attach your newly created IAM roleÊto the EC2 instance.
4. Reconnect to your EC2 instance usingÊSSH.
Generate an AWS authentication token to identify the IAM role
After you connect to your EC2 instance, run the following AWS CLI command toÊgenerate an authentication token. Copy and store the authentication token for later use.

Note:ÊThis token expires within 15 minutes of creation.
$ aws rds generate-db-auth-token --hostname {db or cluster endpoint} --port 3306 --username {IAM user or instance profile}

Download the SSL root certificate file or certificate bundle file
Run this command to download the root certificate that works for all regions:

$ wget https://s3.amazonaws.com/rds-downloads/rds-ca-2015-root.pem
If your application does not accept certificate chains, run the following command to download the certificate bundle that includes both the old and new root certificates:
$ wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem

Note:ÊFor Windows platform applications that need a PKCS7 file, seeÊUsing SSL to Encrypt a Connection to a DB InstanceÊto download the appropriate certificate.
Connect to the RDS DB instance using IAM role credentials and the authentication token

After you download the certificate file, run the following command to connect to the RDS DB instance with SSL using the MySQL utility.
Note:ÊIf you're connecting to instances in an Amazon Aurora DB cluster, you can connect to one of these endpoints: the cluster endpoint, the reader endpoint, or the instance endpoint.
$ mysql -h {db or cluser endpoint} --ssl-ca={certificate file name with complete path} --ssl-verify-server-cert -u {dbusername2} -p"{authenticationtoken}" --enable-cleartext-plugin



